Osa 1

Osan 1 oppimistavoitteet
React
  funktiona ja luokkana määriteltävät komponentit
  tietojen ja funktioiden välittäminen lapsikomponentteihin propseina
  komponentin tila
  tilan päivittämisen periaatteet
  tapahtumankäsittelyn perusteet
Javascript
  muuttujien määrittely
  taulukko ja sen operaatiot (mm. concat, forEach, join ja map)
  literaalisyntaksilla määritellyt oliot
  funktioiden määrittely
  this:in käyttäytyminen
  funktioita palauttavat funktiot
  luokkasyntaksi
  class propertynä määritellyt metodit

Aloitus:
  Luodaan sovellus nimeltään osa1 ja käynnistetään se:

    $ npx create-react-app osa1

    Mutta ongelmia heti:
    error eslint@5.6.0: The engine "node" is incompatible with this module.
    Expected version "^6.14.0 || ^8.10.0 || >=9.10.0". Got "9.3.0"
    error Found incompatible module
    info Visit https://yarnpkg.com/en/docs/cli/add for documentation about this command.

    Ja päivitysyritykset:
    sudo apt-get upgrade nodejs
    nodejs is already the newest version (8.10.0~dfsg-2ubuntu0.3).

    Mutta:
    $ node --version
    v9.3.0 (tämä viittaa paikalliseen hakemistoon)
    $ nodejs --version
    v8.10.0

    asennusyritys:
      https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-18-04
      komennolla (node version manager) "nvm ls-remote" versiohistoria ->
       v8.12.0 (Latest LTS: Carbon)
      $ nvm install 8.12.0 (Eli periaatteessa downgreidasin)
      --> Nyt sovelluksen luonti lähti eteenpäin.
      $ which node
        /home/iot/.nvm/versions/node/v8.12.0/bin/node

      $ npm start
      ---> Serveri käynnistyy -> selainkin ohjautui automaattisesti http://localhost:3000/

      HUOMIO! Samaan porttiin ei voi käynnistää toista serveriä! Eli sain omituisia
      virheilmoituksia , koska selain oli vielä auki vanhasta paikasta. Ei se
      nyt siitä johtunutkaan! Taas tulee virheilmoitusta, vaikkei olekaan
      toista serveriä, olen nimittäin bootannut linuxin tässä välissä.

      Löytyi tällä kertaa toimiva loitsu:
      $ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
      Lisää selitystä: https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers#the-technical-details
      Olisiko syynä se, etten ole lopettanut nodea siististi ja noden
      pyöritykseen käytetään mielettömästi eri tiedostoja?


Sitten Javascriptin pariin.

      Olioiden esittelyä ja käyttöä
        - alkuun oli kankeutta mm. pistenotaatiossa oliotaulukossa

      "Luokkien" käyttö
        Tämän kurssin puitteissa niitä ei kuitenkaan juuri käytetä, vaan pyritään
        enemmän funktionaaliseen ohjelmointiin.

      Renderöintiä

      Tapahtumankäsittelyä
        - esimerkkinä hiirellä napin painaminen
        - Napille on lisättävä tapahtumankäsittelijä
        - Tapahtumankäsittelijän tulee olla aina funktio! (ei siis esim. funktiokutsu)
        - osa1:n lopussa on tiiviisti kertausta tästä
        - esimerkissä mm. useamman napin käyttö "funktioita palauttavilla fuktioilla"


      Metodien käyttö ja this
        - esim. aiemmin mainittu .bind(this)
        Tehdään tässä konstruktorissa:
        this.kasvataYhdella = this.kasvataYhdella.bind(this)
        this.nollaa = this.nollaa.bind(this)
        -> heti perään kylläkin viitattiin nuolifunktioratkaisuun uudessa JS-standardissa esim:
        kasvataYhdella = () => {
          this.setState({ counter: this.state.counter + 1 })
        }
        - Ylläolevaan käytetään tällä kurssilla!
        Sama tarkastellen edellistä tilaa:
        this.setState((prevState) => ({
          counter: prevState.counter + 1
        }));
        - Tärkeä mielessä pidettävä seikka on myös, se että React kutsuu funktiota setState asynkroonisesti

      Funktio joka palauttaa funktion
        - tässä esimerkissä varoiteltiinkin, että vaatii kikka totuttelua.
        Kyllä vain, melkoisen hämärä on tuo. Ei aukea toisellakaan lukemisella.
        Esimerkkirivi: asetaArvoon = (arvo) => () => this.setState({ counter: arvo })
        - Tässä näytetty tapa soveltaa funktioita palauttavia funktioita on
        oleellisesti sama asia mistä funktionaalisessa ohjelmoinnissa käytetään termiä currying.

      Tilan vieminen alikomponenttiin
        - esimerkissä tehtiin "uudelleenkäytettävä nappi"

      Monimutkaisemman tilan päivittäminen
        - esimerkissä pari nappia, joilla päivitettiin eri kenttien arvoja

      Taulukon käsittelyä
        - Esim: Tilan kenttä kaikki saa nyt arvokseen entisen tilan, mihin on liitetty
        v metodilla concat, joka toimii siten, että se ei muuta olemassaolevaa taulukkoa
        vaan luo uuden taulukon, mihin uusi alkio on lisätty.
        - Jos tilan kentissä on olioita, älä muuta niitä vaan tee muutos aina kopioon!

      Ehdollinen renderöinti
        - en saanut sulkuja kohdilleen esimerkissä tai sitten sovellus kaipasi renderiä

      Hyviä vihjeitä:
        - vanha kunnon konsoliin printtaus esim:
        const Button = (props) => {
          console.log(props)
          const { handleClick, text } = props
          return (
            <button onClick={handleClick}>
              {text}
            </button>
          )
        }
        - Kirjoittaa koodin sekaan

          debugger

        ...suoritus pysähtyy tuohon ja on mahdollista tutkia selaimen kehittäjä-
        ikkunassa esim. muuttujien tilaa

      Harjoitus 1.7 haasteita:
        - En keksinyt varmankaan sitä "oikeaa" tapaa tuoreiden painallusten
        saamiseksi mukaan mm. keskiarvolaskuihin. Käytin argumentteja kutsuun.
        - Ilmeisesti täytyy löytää tapa "enumeroida" arvot 1, 0, -1

      Harjoitus 1.8 runsaasti taistelua:
        - En saanut ensin mielestäni sujuvaksi keksimääni napinluontia 
        toimimaan järkevästi. Napin alla ollut koodi tahdoi lähteä
        käyntiin jo renderöintivaiheessa. Tyhjän funktion tekeminen
        auttoi asiaan.
        - Ylläoleva asia on käsitelty materiaalissa useasti, mutta sen
        mieleenpainaminen vaati tuskaa ja jälkijättöistä löytämisen iloa
        materiaalia uudelleen selatessa. Virheistä oppii ja näin ne jää 
        parhaiten mieleen. "Määritellään funktio joka palauttaa funktion"
        - Sitten vaati paljon pään laittoa puun runkoon, jotta sain 
        tehtyä edes välttävät Statistics-komponentit. Ehkä täyttää
        tehtävänmäärittelyn, vaikkeivat ole mitenkään kaunista niiden
        kutsuminen.

!!!  .gitignore-tiedoston käyttö on vielä hakusessa, Githubiin meni nyt paljon
roskaa joita olin ehkä muokannut jossain vaiheessa enkä oikein uskalla
poistaa niitä kummallakaan puolella.

      Harjoitus 1.9:
        - tehtävä muutoin oli erittäin helppo, mutta sovelluksen käynnistämisen
        yhteydessä viisinkertainen "Ei yhtään..."-tuloste oli haaste:
        - Kesti jälleen kauan hokata Tuo ehdollinen renderöinti
        - Yritin ensin tehdä ratkaisua funktioihin, mutta meni liian mutkikkaaksi

      Harjoitus 1.10:
        - Olen mielestäni jo tehnyt tehtävänannon vaatimukset

!!! Nyt kohtasin ongelmia Visual Studio Coden kanssa:
  - Sen Git-palikkaan oli ilmestynyt 5000 kpl (maksimäärä?)
  muutoksia node_modules-hakemistosta! Mitähän tuolle
  hässäkälle pitäisi tehtä?
----
  $git status
  Untracked files:
  (use "git add <file>..." to include in what will be committed)

	node_modules/

no changes added to commit (use "git add" and/or "git commit -a")
----

Johtunee tuosta, että sovelluskaan ei taas toimi. Mitähän lie tapahtuu, jos
vain kännistän ympäristön uudelleen: "serveri" ja editori?

---clip---
$~/Open-Full-Stack-2018/osa1/sovellus/src$ npm start
npm ERR! path /home/iot/Open-Full-Stack-2018/osa1/sovellus/package.json
npm ERR! code ENOENT
npm ERR! errno -2
npm ERR! syscall open
npm ERR! enoent ENOENT: no such file or directory, open '/home/iot/Open-Full-Stack-2018/osa1/sovellus/package.json'
npm ERR! enoent This is related to npm not being able to find a file.
npm ERR! enoent 

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/iot/.npm/_logs/2018-11-14T05_34_01_513Z-debug.log
---clip---

---> Eli ei auta! Mikähän piru tuohon nyt iski? 

- Yritin seuraavaa tuo node_modules-hakemiston poistamiseen gitistä:

$:~/Open-Full-Stack-2018/osa1/sovellus$ git reset HEAD node_modules/.
Unstaged changes after reset:
M	osa1/Oppimispaivakirja

---clip---
iot@iot-VirtualBox:~/Open-Full-Stack-2018/osa1/sovellus$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   ../Oppimispaivakirja

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	node_modules/

no changes added to commit (use "git add" and/or "git commit -a")
---clip---

---> node_modules-hakemiston koko sisältö siis vielä roikkuu tuolla? (Kokeilin tuohon HEAD:iin
myös eri variaatioita ja yhtä tiedostoa)

!!!!! SAATOIN KEKSIÄ: 
- VScoden valikosta olin commitoinut tiedostot pushaamaan ja ilmeisesti 
myös pullaamaan, jolloin hakemistosta oli mennyt sileäksi nuo muutama
noden toiminnan kannalta oleellinen tiedostoa
- Periaatteessa voisin ilmeisesti vetää sileäksi työhakemiston ja
asentaa tuo kyseinen hakemisto uudelleen ja sen jälkeen pullata tiedostotgithubista
---> Ensin siirrään tiedostoja väliaikaiseen turvaan, koska todennäköisesti
jotain saattaa mennä pieleen.
---> Tuon jälkeen 
Luodaan sovellus nimeltään osa1 ja käynnistetään se:

$ npx create-react-app osa1
$ cd osa1
$ npm start

Ja korvaan index.js:n omalla työtiedostollani käsin.

Ongelmia:
Olen asentanut viime talven IoT-kurssilla nodet ns. päin persettä. Osa 
tavarasta on tunnuksen alla ja osa järjestelmähakemistoissa. Näinollen
systeemi vain ei käynnisty.
-> eli hommana vanhojen asennusten poisto, uudet asennukset ja sitten 
ylläoleva homma työtiedostojen palautuksesta ja gitit taas toimimaan

VIHDOIN keräsin rohkeutta ja selvitin tuon ongelman:
Eli asentelin nodet uudelleen tuon sivun ohjeiden mukaisesti paikalliseen
hakemistooni: https://fullstackopen.github.io/asennusohjeita/

Vähän tämä hakemistorakenne on pielessä, täytyy virtaviivaistaa osa2:ssa.
Gitin toiminta on vielä testaamatta, jotain voi mennä siinä vielä pieleen.


Tähän väliin tuli Black Friday:
Sain vihjeen https://www.udemy.com/ -saitin tarjouksesta. 10 euroa/kurssi.
Ostin kaksi tukemaan tätä oppimistani:
https://www.udemy.com/react-the-complete-guide-incl-redux/
https://www.udemy.com/nodejs-the-complete-guide/
ja vielä pari:
https://www.udemy.com/the-ultimate-mysql-bootcamp-go-from-sql-beginner-to-expert/
https://www.udemy.com/css-the-complete-guide-incl-flexbox-grid-sass/

VSCode:
Usean rivin kommentointi tai siis editointi: SHIFT + ALT + nuolinäppäimet
https://kencenerelli.wordpress.com/2018/03/25/visual-studio-code-multi-line-and-multi-cursor-editing/

Tehtävä 1.11:

- pieni knoppi: funktiosta paluuarvon pitää olla tägin sisällä, Tässä tapauksessa
tein tyhjän tägin, eikä tuosta ainakaan varoitusta tullut

Tehtävä 1.12.

- Siirsin array constin koodin alkuun, jotta satunnaistoiminto löytää kuinka monta niitä on tehty.
